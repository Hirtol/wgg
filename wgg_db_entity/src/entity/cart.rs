//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "cart"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: i32,
    pub user_id: i32,
    pub completed_at: Option<DateTimeUtc>,
    pub picked_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserId,
    CompletedAt,
    PickedId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Providers,
    Users,
    CartContentsNotes,
    CartContentsProvider,
    CartContentsAggregate,
    CartTally,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::UserId => ColumnType::Integer.def(),
            Self::CompletedAt => ColumnType::Timestamp.def().null(),
            Self::PickedId => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Providers => Entity::belongs_to(super::providers::Entity)
                .from(Column::PickedId)
                .to(super::providers::Column::Id)
                .into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::UserId)
                .to(super::users::Column::Id)
                .into(),
            Self::CartContentsNotes => Entity::has_many(super::cart_contents_notes::Entity).into(),
            Self::CartContentsProvider => Entity::has_many(super::cart_contents_provider::Entity).into(),
            Self::CartContentsAggregate => Entity::has_many(super::cart_contents_aggregate::Entity).into(),
            Self::CartTally => Entity::has_many(super::cart_tally::Entity).into(),
        }
    }
}

impl Related<super::providers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Providers.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::cart_contents_notes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CartContentsNotes.def()
    }
}

impl Related<super::cart_contents_provider::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CartContentsProvider.def()
    }
}

impl Related<super::cart_contents_aggregate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CartContentsAggregate.def()
    }
}

impl Related<super::cart_tally::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CartTally.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
