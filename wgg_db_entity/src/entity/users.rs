//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "users"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: i32,
    pub email: String,
    pub username: String,
    pub hash: String,
    pub created_at: DateTimeUtc,
    pub is_admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Email,
    Username,
    Hash,
    CreatedAt,
    IsAdmin,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AggIngredients,
    UsersTokens,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Email => ColumnType::String(None).def(),
            Self::Username => ColumnType::String(None).def(),
            Self::Hash => ColumnType::String(None).def(),
            Self::CreatedAt => ColumnType::Timestamp.def(),
            Self::IsAdmin => ColumnType::Boolean.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::AggIngredients => Entity::has_many(super::agg_ingredients::Entity).into(),
            Self::UsersTokens => Entity::has_many(super::users_tokens::Entity).into(),
        }
    }
}

impl Related<super::agg_ingredients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AggIngredients.def()
    }
}

impl Related<super::users_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersTokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
