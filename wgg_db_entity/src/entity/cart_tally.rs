//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "cart_tally"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub cart_id: i32,
    pub provider_id: i32,
    pub price_cents: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    CartId,
    ProviderId,
    PriceCents,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    CartId,
    ProviderId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (i32, i32);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Providers,
    Cart,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::CartId => ColumnType::Integer.def(),
            Self::ProviderId => ColumnType::Integer.def(),
            Self::PriceCents => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Providers => Entity::belongs_to(super::providers::Entity)
                .from(Column::ProviderId)
                .to(super::providers::Column::Id)
                .into(),
            Self::Cart => Entity::belongs_to(super::cart::Entity)
                .from(Column::CartId)
                .to(super::cart::Column::Id)
                .into(),
        }
    }
}

impl Related<super::providers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Providers.def()
    }
}

impl Related<super::cart::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cart.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
