input AggregateCreateInput {
	name: String!
	ingredients: [ProviderProductInput!]!
}

type AggregateCreatePayload {
	"""
	The newly created aggregate ingredient
	"""
	data: AggregateIngredient!
}

type AggregateDeletePayload {
	"""
	The amount of aggregate ingredients deleted.
	"""
	deleted: Int!
}

type AggregateIngredient {
	id: Int!
	name: String!
	imageUrl: String
	createdAt: DateTime!
	"""
	Return all composite ingredients which are part of this aggregate ingredient.
	"""
	ingredients: [WggSearchProduct!]!
}

type AggregateIngredientConnection {
	edges: [AggregateIngredientEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AggregateIngredient!]!
	"""
	Information about the current page.
	"""
	pageInfo: PageInfo!
	"""
	The total amount of items available in this collection
	"""
	totalCount: Int!
}

"""
An edge in a connection
"""
type AggregateIngredientEdge {
	cursor: String!
	node: AggregateIngredient!
}

input AggregateProductInput {
	aggregateId: Int!
	quantity: Int!
}

input AggregateUpdateChangeSet {
	name: String
	ingredients: [ProviderProductInput!]
	imageUrl: String
}

type AggregateUpdatePayload {
	"""
	The updated aggregate ingredient
	"""
	data: AggregateIngredient!
}

type AllergyTags {
	name: String!
	contains: AllergyType!
}

enum AllergyType {
	CONTAINS
	MAY_CONTAIN
}

"""
Represents a user that is already logged in.
Implements [axum::extract::FromRequest] and can therefore be requested in HTTP service methods.
"""
type AuthContext {
	id: Int!
	email: String!
	username: String!
	isAdmin: Boolean!
	"""
	Return the current cart in use by this user
	"""
	currentCart: UserCart!
	"""
	Return all carts owned by the given user
	"""
	carts(after: String, first: Int, filters: CartListFilter): UserCartConnection!
}


input CartAddProductInput {
	notes: NoteProductInput
	rawProduct: RawProductInput
	aggregate: AggregateProductInput
}

type CartAddProductPayload {
	"""
	The current cart
	"""
	data: UserCart!
}

type CartAggregateProduct implements CartContent {
	id: Int!
	quantity: Int!
	createdAt: DateTime!
	"""
	Return the primary aggregate product associated with this entry
	
	# Accessible by
	
	Everyone.
	"""
	aggregate: AggregateIngredient!
}

input CartCompleteInput {
	pickedProvider: Provider!
}

type CartCompletePayload {
	"""
	The completed cart
	"""
	data: UserCart!
}

interface CartContent {
	id: Int!
	quantity: Int!
	createdAt: DateTime!
}

input CartListFilter {
	or: [CartListFilter!]
	and: [CartListFilter!]
	"""
	The user id who owns a given cart.
	"""
	ownedBy: Int
	"""
	Whether the cart has been resolved (aka completed)
	"""
	isCompleted: Boolean
}

type CartNoteProduct implements CartContent {
	id: Int!
	note: String!
	quantity: Int!
	createdAt: DateTime!
}

type CartProviderProduct implements CartContent {
	id: Int!
	quantity: Int!
	createdAt: DateTime!
	"""
	Return the product associated with this entry
	
	# Accessible by
	
	Everyone.
	"""
	product: WggSearchProduct!
}

input CartRemoveProductInput {
	"""
	The note id.
	"""
	notes: Int
	"""
	The database id of this raw product (note, *not* the provider product id used to add this product!).
	"""
	rawProduct: Int
	"""
	The aggregate id.
	"""
	aggregate: Int
}

type CartRemoveProductPayload {
	"""
	The current cart
	"""
	data: UserCart!
}

type CartTally {
	priceCents: Int!
	provider: Provider!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime


type FreshLabel {
	daysFresh: Int!
}


type IngredientInfo {
	name: String!
}

input IngredientQueryFilter {
	or: [IngredientQueryFilter!]
	and: [IngredientQueryFilter!]
	"""
	Return all aggregate ingredients which share (part) of the given name
	"""
	hasName: String
}


"""
Contains additional information relevant for an item.

Examples include: Preparation instructions, Supplier info
"""
type ItemInfo {
	itemType: ItemType!
	text: String!
}

enum ItemType {
	PREPARATION_ADVICE
	ADDITIONAL_INFO
	STORAGE_ADVICE
	COUNTRY_OF_ORIGIN
	SAFETY_WARNING
}

input LoginInput {
	"""
	The email of the user account
	"""
	email: String!
	"""
	The account's password
	"""
	password: String!
}

type MoreButton {
	images: [String!]!
}

type MutationRoot {
	"""
	Create a new user.
	
	# Returns
	
	The newly created user.
	
	# Accessible By
	
	Admins.
	"""
	userCreate(input: UserCreateInput!): UserCreatePayload!
	"""
	Update an existing user.
	
	# Returns
	
	The updated user.
	
	# Accessible By
	
	Admins, or users modifying themselves.
	"""
	userUpdate(id: Int!, input: UserUpdateChangeSet!): UserUpdatePayload!
	"""
	Deletes an existing user.
	
	# Accessible By
	
	Admins.
	"""
	userDelete(id: Int!): UserDeletePayload!
	"""
	Attempt to log in as the provided user
	
	# Accesible By
	
	Everyone (also unauthenticated users)
	"""
	login(input: LoginInput!): UserLoginPayload!
	"""
	Log out with the current account
	"""
	logout: Int!
	"""
	Create a new aggregate ingredient.
	The sub-ingredients list should have at least one ingredient inside.
	The first in the aforementioned list's image will be used as the image for the aggregate ingredient, this can later be changed.
	
	# Returns
	
	The newly created aggregate ingredient.
	
	# Accessible By
	
	Everyone.
	"""
	aggregateIngredientCreate(input: AggregateCreateInput!): AggregateCreatePayload!
	"""
	Update an aggregate ingredient.
	The sub-ingredients list should have at least one ingredient inside.
	
	# Returns
	
	The newly updated aggregate ingredient.
	
	# Accessible By
	
	Everyone. One can only update aggregate ingredients owned by the current viewer, unless they're an admin.
	"""
	aggregateIngredientUpdate(id: Int!, input: AggregateUpdateChangeSet!): AggregateUpdatePayload!
	"""
	Delete an aggregate ingredient.
	All sub-ingredients referencing this ingredient will be deleted as well.
	
	# Accessible By
	
	Everyone. One can only delete aggregate ingredients owned by the current viewer, unless they're an admin.
	"""
	aggregateIngredientDelete(ids: [Int!]!): AggregateDeletePayload!
	"""
	Add the provided products to the current cart.
	
	If one adds an item that is already in the cart then the count is set to the provided amount.
	
	# Accessible By
	
	Everyone.
	"""
	cartCurrentAddProduct(input: CartAddProductInput!): CartAddProductPayload!
	"""
	Add the provided products to the current cart.
	
	If one adds an item that is already in the cart then the count is set to the provided amount.
	
	# Accessible By
	
	Everyone.
	"""
	cartCurrentRemoveProduct(input: CartRemoveProductInput!): CartRemoveProductPayload!
	"""
	Mark the current cart as completed, and create a new one.
	
	# Accessible By
	
	Everyone.
	"""
	cartCurrentComplete(input: CartCompleteInput!): CartCompletePayload!
}

input NoteProductInput {
	content: String!
	quantity: Int!
}

type NumberOfServings {
	amount: Int!
}

type NutritionalInfo {
	"""
	For what unit (e.g, `per 100g`) these items are valid.
	"""
	infoUnit: String!
	items: [NutritionalItem!]!
}

type NutritionalItem {
	name: String!
	value: String!
	subValues: [SubNutritionalItem!]!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PrepTime {
	timeMinutes: Int!
}

type ProductId implements PromotionProduct {
	id: String!
}

interface PromotionProduct {
	id: String!
}

enum Provider {
	PICNIC
	JUMBO
}

input ProviderProductInput {
	id: String!
	provider: Provider!
}

type QueryRoot {
	proAutocomplete(provider: Provider! = PICNIC, query: String!): [WggAutocomplete!]!
	proSearch(provider: Provider! = PICNIC, query: String!): [WggSearchProduct!]!
	proSearchAll(query: String!): [WggSearchProduct!]!
	proProduct(provider: Provider! = PICNIC, productId: String!): WggProduct!
	proPromotions(provider: Provider! = PICNIC): [WggSaleCategory!]!
	proPromotionsAll: [WggSaleCategory!]!
	proPromotionsSublist(provider: Provider! = PICNIC, sublistId: String!): [WggSearchProduct!]!
	"""
	Returns the current user
	"""
	viewer: AuthContext!
	"""
	Returns all aggregate ingredients owned by the current user.
	
	# Accessible By
	
	Everyone.
	"""
	aggregateIngredients(after: String, first: Int, filters: IngredientQueryFilter): AggregateIngredientConnection!
	"""
	Return the current (un-resolved) cart for the viewer.
	
	# Accessible By
	
	Everyone.
	"""
	cartCurrent: UserCart!
	carts(after: String, first: Int, filters: CartListFilter): UserCartConnection!
}

input RawProductInput {
	productId: String!
	provider: Provider!
	quantity: Int!
}

"""
A subtitle for a particular sale.
"""
type SaleDescription {
	text: String!
}

"""
Describes the type of sale that applies to the attached object.

Think of "1 + 1 Free", or "50% off".
"""
type SaleLabel {
	text: String!
}

"""
Until what date (inclusive) the attached sale is valid.
"""
type SaleValidity {
	validFrom: DateTime!
	validUntil: DateTime!
}


type SubNutritionalItem {
	name: String!
	value: String!
}

"""
If the item is unavailable
"""
type UnavailableItem {
	reason: UnavailableReason!
	explanationShort: String
	explanationLong: String
	"""
	Lists replacements if the store has suggested any.
	
	Some stores won't support this functionality, and this would therefore remain empty.
	"""
	replacements: [WggSearchProduct!]!
}

enum UnavailableReason {
	OUT_OF_ASSORTMENT
	OUT_OF_SEASON
	TEMPORARILY_UNAVAILABLE
	UNKNOWN
}

enum Unit {
	PIECE
	LITER
	MILLI_LITER
	KILO_GRAM
	GRAM
}

type UnitPrice {
	unit: Unit!
	price: Int!
}

type UnitQuantity {
	unit: Unit!
	amount: Float!
}

type UserCart {
	id: Int!
	"""
	When a cart has been *resolved*, then it is marked as completed.
	"""
	completed: Boolean!
	"""
	When a cart has been *resolved*, then it is marked as completed.
	"""
	completedAt: DateTime
	"""
	When a cart has been *resolved*, then a particular provider will also have been picked for that cart.
	"""
	pickedProvider: Provider
	"""
	Return the current (possibly outdated!) price tallies for the providers relevant to this cart.
	One should *resolve* the current cart in order to get the most up-to-date prices.
	
	Note that the tallies include provider specific products (e.g, if you only have milk from Picnic, but not Jumbo,
	Picnic will have a higher tally)
	"""
	tallies(forceCurrent: Boolean): [CartTally!]!
	"""
	Return all the contents of the current cart, notes, products, and aggregates.
	
	The contents are sorted by the timestamp they were added (recent on top)
	"""
	contents: [CartContent!]!
	"""
	Return the owner of this cart.
	
	# Accessible by
	
	Everyone. If the current cart is not owned by the current user then the current user needs to be an admin.
	"""
	owner: AuthContext!
}

type UserCartConnection {
	edges: [UserCartEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [UserCart!]!
	"""
	Information about the current page.
	"""
	pageInfo: PageInfo!
	"""
	The total amount of items available in this collection
	"""
	totalCount: Int!
}

"""
An edge in a connection
"""
type UserCartEdge {
	cursor: String!
	node: UserCart!
}

input UserCreateInput {
	username: String!
	"""
	The email of the user account
	"""
	email: String!
	"""
	The account's password
	"""
	password: String!
	isAdmin: Boolean!
}

type UserCreatePayload {
	"""
	The newly created user.
	"""
	user: AuthContext!
}

type UserDeletePayload {
	"""
	The Id of the deleted user
	"""
	id: Int!
}

type UserLoginPayload {
	"""
	The newly logged-in user.
	"""
	user: AuthContext!
}

input UserUpdateChangeSet {
	username: String
	email: String
	password: String
}

type UserUpdatePayload {
	"""
	The newly updated user.
	"""
	user: AuthContext!
}

type WggAutocomplete {
	name: String!
}

union WggDecorator = FreshLabel | SaleLabel | SaleValidity | SaleDescription | UnavailableItem | PrepTime | NumberOfServings | MoreButton

type WggProduct {
	"""
	This service's ID for the current product.
	Not transferable between [Provider]s
	"""
	id: String!
	"""
	The name of the product.
	"""
	name: String!
	"""
	Full product description.
	"""
	description: String!
	"""
	The full price of an article, ignoring any sales
	"""
	fullPrice: Int!
	"""
	The present display price (taking into account active sales).
	"""
	displayPrice: Int!
	"""
	The amount of weight/liters/pieces this product represents.
	"""
	unitQuantity: UnitQuantity!
	unitPrice: UnitPrice
	"""
	A small check to see if the current item is unavailable.
	
	`decorators` might contains more information as to the nature of the disruption.
	"""
	available: Boolean!
	"""
	Direct URL to product image.
	"""
	imageUrls: [String!]!
	"""
	All ingredients in a structured format.
	
	Can be empty for base ingredients such as cucumbers, for example.
	"""
	ingredients: [IngredientInfo!]!
	"""
	Denotes the nutritional info, normalised to 100g.
	"""
	nutritional: NutritionalInfo
	"""
	All information for allergy tags.
	
	Can be empty if the product has no allergens.
	"""
	allergyInfo: [AllergyTags!]!
	"""
	Denotes all optional bits of information, such as preparation instructions or supplier information.
	
	These can be useful to add as additional collapsable tabs in the front-end ui.
	"""
	additionalItems: [ItemInfo!]!
	"""
	All decorators describing the object in further detail.
	"""
	decorators: [WggDecorator!]!
	"""
	The grocery store this item is provided from.
	"""
	provider: Provider!
}

type WggSaleCategory {
	id: String!
	name: String!
	imageUrls: [String!]!
	"""
	A potentially limited selection of items, only supported for certain [Provider]s.
	
	Picnic is one example of such a provider.
	Generally recommended to query for more detailed information when needed.
	"""
	limitedItems: [PromotionProduct!]!
	decorators: [WggDecorator!]!
	provider: Provider!
}

type WggSearchProduct implements PromotionProduct {
	id: String!
	name: String!
	"""
	The full price of an article, ignoring any sales
	"""
	fullPrice: Int!
	"""
	The present display price (taking into account active sales).
	"""
	displayPrice: Int!
	"""
	The amount of weight/liters/pieces this product represents.
	"""
	unitQuantity: UnitQuantity!
	unitPrice: UnitPrice
	"""
	A small check to see if the current item is unavailable.
	
	`decorators` might contain more information as to the nature of the disruption.
	"""
	available: Boolean!
	"""
	Direct URL to product image.
	"""
	imageUrl: String
	decorators: [WggDecorator!]!
	"""
	The grocery store which provided this item.
	"""
	provider: Provider!
}

schema {
	query: QueryRoot
	mutation: MutationRoot
}
